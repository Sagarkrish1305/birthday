{"ast":null,"code":"var _jsxFileName = \"/Users/krishsagar/Desktop/Priya Birthday/PriyaBirthdayFinal/pbirthday/src/Components/ThreeJs/ThreeScene.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst YourComponent = () => {\n  _s();\n  useEffect(() => {\n    // Your Three.js logic here\n    const scene = new THREE.Scene();\n    const axesHelper = new THREE.AxesHelper(1e10);\n    scene.add(axesHelper);\n\n    //\n    const textureLoader = new THREE.TextureLoader();\n    const texture = textureLoader.load('/assets/matcaps/matcaps/3.png');\n    texture.magFilter = THREE.NearestFilter;\n    texture.minFilter = THREE.NearestFilter;\n\n    // Variables\n    let textGeometry, text;\n    let font;\n    const textMaterial = new THREE.MeshMatcapMaterial({\n      matcap: texture\n    });\n\n    // Parameters\n    const text3Dparameters = {\n      text: 'Hello Krish',\n      size: 0.5,\n      height: 0.2,\n      curveSegments: 12,\n      bevelEnabled: true,\n      bevelThickness: 0.03,\n      bevelSize: 0.02,\n      bevelOffset: 0,\n      bevelSegments: 5\n    };\n\n    // Function to create and update text geometry\n    function createTextGeometry() {\n      if (text) {\n        scene.remove(text);\n        textGeometry.dispose();\n      }\n      textGeometry = new TextGeometry(text3Dparameters.text, {\n        font: font,\n        size: text3Dparameters.size,\n        depth: text3Dparameters.height,\n        curveSegments: text3Dparameters.curveSegments,\n        bevelEnabled: text3Dparameters.bevelEnabled,\n        bevelThickness: text3Dparameters.bevelThickness,\n        bevelSize: text3Dparameters.bevelSize,\n        bevelOffset: text3Dparameters.bevelOffset,\n        bevelSegments: text3Dparameters.bevelSegments\n      });\n      text = new THREE.Mesh(textGeometry, textMaterial);\n      scene.add(text);\n\n      // To Center the Text Geometry\n      // textGeometry.computeBoundingBox()\n      // console.log(textGeometry.boundingBox)\n      // textGeometry.translate(\n      //     - (textGeometry.boundingBox.max.x - text3Dparameters.bevelSize) * 0.5, \n      //     - (textGeometry.boundingBox.max.y - text3Dparameters.bevelSize) * 0.5, \n      //     - (textGeometry.boundingBox.max.z - text3Dparameters.bevelThickness) * 0.5, \n      // )\n\n      // An easy way is to \n      textGeometry.center();\n    }\n\n    // Fonts\n    const fontLoader = new FontLoader();\n    fontLoader.load('assets/fonts/helvetiker_regular.typeface.json', loadedFont => {\n      console.log(\"Font Loaded\");\n      font = loadedFont;\n      createTextGeometry();\n    });\n\n    // Donuts\n    console.time(\"donuts\");\n    const donutGeometry = new THREE.TorusGeometry(0.3, 0.2, 20, 45);\n    for (let i = 0; i < 300; i++) {\n      const donut = new THREE.Mesh(donutGeometry, textMaterial);\n      donut.position.x = Math.random() * 20 - 10;\n      donut.position.y = Math.random() * 20 - 10;\n      donut.position.z = Math.random() * 20 - 10;\n      donut.rotation.set(Math.random() * 2 * Math.PI, Math.random() * 2 * Math.PI, 0);\n      scene.add(donut);\n    }\n    console.timeEnd(\"donuts\");\n\n    // Camera\n    const FieldOfView = 75;\n    const sizes = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    };\n    const camera = new THREE.PerspectiveCamera(FieldOfView, sizes.width / sizes.height);\n    camera.position.set(1, 2, 4);\n    scene.add(camera);\n\n    // Renderer\n    const renderer = new THREE.WebGLRenderer({\n      canvas: document.querySelector('.webgl')\n    });\n    renderer.setSize(sizes.width, sizes.height);\n\n    // Orbit Control\n    const control = new OrbitControls(camera, renderer.domElement);\n    control.enableDamping = true;\n\n    // Handle window resize\n    const handleResize = () => {\n      sizes.width = window.innerWidth;\n      sizes.height = window.innerHeight;\n      camera.aspect = sizes.width / sizes.height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(sizes.width, sizes.height);\n      renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Handle full screen\n    const handleFullscreen = () => {\n      if (!document.fullscreenElement) {\n        renderer.domElement.requestFullscreen();\n      } else {\n        document.exitFullscreen();\n      }\n    };\n    window.addEventListener('dblclick', handleFullscreen);\n\n    // Animation loop\n    const animate = () => {\n      control.update();\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    };\n    animate();\n    return () => {\n      // Cleanup logic if needed\n      window.removeEventListener('resize', handleResize);\n      window.removeEventListener('dblclick', handleFullscreen);\n    };\n  }, []); // Empty dependency array to run only once on component mount\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    className: \"webgl\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 9\n  }, this);\n};\n_s(YourComponent, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = YourComponent;\nexport default YourComponent;\nvar _c;\n$RefreshReg$(_c, \"YourComponent\");","map":{"version":3,"names":["React","useEffect","THREE","OrbitControls","FontLoader","TextGeometry","jsxDEV","_jsxDEV","YourComponent","_s","scene","Scene","axesHelper","AxesHelper","add","textureLoader","TextureLoader","texture","load","magFilter","NearestFilter","minFilter","textGeometry","text","font","textMaterial","MeshMatcapMaterial","matcap","text3Dparameters","size","height","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","createTextGeometry","remove","dispose","depth","Mesh","center","fontLoader","loadedFont","console","log","time","donutGeometry","TorusGeometry","i","donut","position","x","Math","random","y","z","rotation","set","PI","timeEnd","FieldOfView","sizes","width","window","innerWidth","innerHeight","camera","PerspectiveCamera","renderer","WebGLRenderer","canvas","document","querySelector","setSize","control","domElement","enableDamping","handleResize","aspect","updateProjectionMatrix","setPixelRatio","min","devicePixelRatio","addEventListener","handleFullscreen","fullscreenElement","requestFullscreen","exitFullscreen","animate","update","render","requestAnimationFrame","removeEventListener","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/krishsagar/Desktop/Priya Birthday/PriyaBirthdayFinal/pbirthday/src/Components/ThreeJs/ThreeScene.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\n\nconst YourComponent = () => {\n    useEffect(() => {\n        // Your Three.js logic here\n        const scene = new THREE.Scene();\n\n        const axesHelper = new THREE.AxesHelper(1e10);\n        scene.add(axesHelper);\n\n        //\n        const textureLoader = new THREE.TextureLoader();\n        const texture = textureLoader.load('/assets/matcaps/matcaps/3.png');\n        texture.magFilter = THREE.NearestFilter;\n        texture.minFilter = THREE.NearestFilter;\n\n        // Variables\n        let textGeometry, text;\n        let font;\n        const textMaterial = new THREE.MeshMatcapMaterial({\n            matcap: texture\n        });\n\n        // Parameters\n        const text3Dparameters = {\n            text: 'Hello Krish',\n            size: 0.5,\n            height: 0.2,\n            curveSegments: 12,\n            bevelEnabled: true,\n            bevelThickness: 0.03,\n            bevelSize: 0.02,\n            bevelOffset: 0,\n            bevelSegments: 5\n        };\n\n        // Function to create and update text geometry\n        function createTextGeometry() {\n          if (text) {\n              scene.remove(text);\n              textGeometry.dispose();\n          }\n      \n          textGeometry = new TextGeometry(text3Dparameters.text, {\n              font: font,\n              size: text3Dparameters.size,\n              depth: text3Dparameters.height,\n              curveSegments: text3Dparameters.curveSegments,\n              bevelEnabled: text3Dparameters.bevelEnabled,\n              bevelThickness: text3Dparameters.bevelThickness,\n              bevelSize: text3Dparameters.bevelSize,\n              bevelOffset: text3Dparameters.bevelOffset,\n              bevelSegments: text3Dparameters.bevelSegments\n          });\n      \n          \n          text = new THREE.Mesh(textGeometry, textMaterial);\n          scene.add(text);\n      \n          // To Center the Text Geometry\n          // textGeometry.computeBoundingBox()\n          // console.log(textGeometry.boundingBox)\n          // textGeometry.translate(\n          //     - (textGeometry.boundingBox.max.x - text3Dparameters.bevelSize) * 0.5, \n          //     - (textGeometry.boundingBox.max.y - text3Dparameters.bevelSize) * 0.5, \n          //     - (textGeometry.boundingBox.max.z - text3Dparameters.bevelThickness) * 0.5, \n          // )\n      \n          // An easy way is to \n          textGeometry.center()\n        }\n\n        // Fonts\n        const fontLoader = new FontLoader();\n        fontLoader.load('assets/fonts/helvetiker_regular.typeface.json', (loadedFont) => {\n            console.log(\"Font Loaded\");\n            font = loadedFont;\n            createTextGeometry();\n        });\n\n\n        // Donuts\n        console.time(\"donuts\");\n        const donutGeometry = new THREE.TorusGeometry(0.3, 0.2, 20, 45);\n        for(let i = 0 ; i < 300 ; i++){\n          const donut = new THREE.Mesh(donutGeometry, textMaterial)\n    \n          donut.position.x = Math.random() * 20 - 10\n          donut.position.y = Math.random() * 20 - 10\n          donut.position.z = Math.random() * 20 - 10\n\n          donut.rotation.set(\n              Math.random() * 2 * Math.PI, \n              Math.random() * 2 * Math.PI,\n              0\n          )\n          scene.add(donut)\n        }\n        console.timeEnd(\"donuts\");\n\n        // Camera\n        const FieldOfView = 75;\n        const sizes = {\n            width: window.innerWidth,\n            height: window.innerHeight,\n        };\n        const camera = new THREE.PerspectiveCamera(FieldOfView, sizes.width / sizes.height);\n        camera.position.set(1, 2, 4);\n        scene.add(camera);\n\n        // Renderer\n        const renderer = new THREE.WebGLRenderer({\n            canvas: document.querySelector('.webgl')\n        });\n        renderer.setSize(sizes.width, sizes.height);\n\n        // Orbit Control\n        const control = new OrbitControls(camera, renderer.domElement);\n        control.enableDamping = true;\n\n        // Handle window resize\n        const handleResize = () => {\n            sizes.width = window.innerWidth;\n            sizes.height = window.innerHeight;\n\n            camera.aspect = sizes.width / sizes.height;\n            camera.updateProjectionMatrix();\n            \n            renderer.setSize(sizes.width, sizes.height);\n            renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        };\n        window.addEventListener('resize', handleResize);\n\n        // Handle full screen\n        const handleFullscreen = () => {\n            if (!document.fullscreenElement) {\n                renderer.domElement.requestFullscreen();\n            } else {\n                document.exitFullscreen();\n            }\n        };\n        window.addEventListener('dblclick', handleFullscreen);\n\n\n        // Animation loop\n        const animate = () => {\n            control.update();\n            renderer.render(scene, camera);\n            requestAnimationFrame(animate);\n        };\n        animate();\n\n        return () => {\n            // Cleanup logic if needed\n            window.removeEventListener('resize', handleResize);\n            window.removeEventListener('dblclick', handleFullscreen);\n        };\n    }, []); // Empty dependency array to run only once on component mount\n\n    return (\n        <canvas className=\"webgl\" />\n    );\n};\n\nexport default YourComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,aAAa,QAAQ,2CAA2C;AACzE,SAASC,UAAU,QAAQ,uCAAuC;AAClE,SAASC,YAAY,QAAQ,4CAA4C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1E,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxBR,SAAS,CAAC,MAAM;IACZ;IACA,MAAMS,KAAK,GAAG,IAAIR,KAAK,CAACS,KAAK,CAAC,CAAC;IAE/B,MAAMC,UAAU,GAAG,IAAIV,KAAK,CAACW,UAAU,CAAC,IAAI,CAAC;IAC7CH,KAAK,CAACI,GAAG,CAACF,UAAU,CAAC;;IAErB;IACA,MAAMG,aAAa,GAAG,IAAIb,KAAK,CAACc,aAAa,CAAC,CAAC;IAC/C,MAAMC,OAAO,GAAGF,aAAa,CAACG,IAAI,CAAC,+BAA+B,CAAC;IACnED,OAAO,CAACE,SAAS,GAAGjB,KAAK,CAACkB,aAAa;IACvCH,OAAO,CAACI,SAAS,GAAGnB,KAAK,CAACkB,aAAa;;IAEvC;IACA,IAAIE,YAAY,EAAEC,IAAI;IACtB,IAAIC,IAAI;IACR,MAAMC,YAAY,GAAG,IAAIvB,KAAK,CAACwB,kBAAkB,CAAC;MAC9CC,MAAM,EAAEV;IACZ,CAAC,CAAC;;IAEF;IACA,MAAMW,gBAAgB,GAAG;MACrBL,IAAI,EAAE,aAAa;MACnBM,IAAI,EAAE,GAAG;MACTC,MAAM,EAAE,GAAG;MACXC,aAAa,EAAE,EAAE;MACjBC,YAAY,EAAE,IAAI;MAClBC,cAAc,EAAE,IAAI;MACpBC,SAAS,EAAE,IAAI;MACfC,WAAW,EAAE,CAAC;MACdC,aAAa,EAAE;IACnB,CAAC;;IAED;IACA,SAASC,kBAAkBA,CAAA,EAAG;MAC5B,IAAId,IAAI,EAAE;QACNb,KAAK,CAAC4B,MAAM,CAACf,IAAI,CAAC;QAClBD,YAAY,CAACiB,OAAO,CAAC,CAAC;MAC1B;MAEAjB,YAAY,GAAG,IAAIjB,YAAY,CAACuB,gBAAgB,CAACL,IAAI,EAAE;QACnDC,IAAI,EAAEA,IAAI;QACVK,IAAI,EAAED,gBAAgB,CAACC,IAAI;QAC3BW,KAAK,EAAEZ,gBAAgB,CAACE,MAAM;QAC9BC,aAAa,EAAEH,gBAAgB,CAACG,aAAa;QAC7CC,YAAY,EAAEJ,gBAAgB,CAACI,YAAY;QAC3CC,cAAc,EAAEL,gBAAgB,CAACK,cAAc;QAC/CC,SAAS,EAAEN,gBAAgB,CAACM,SAAS;QACrCC,WAAW,EAAEP,gBAAgB,CAACO,WAAW;QACzCC,aAAa,EAAER,gBAAgB,CAACQ;MACpC,CAAC,CAAC;MAGFb,IAAI,GAAG,IAAIrB,KAAK,CAACuC,IAAI,CAACnB,YAAY,EAAEG,YAAY,CAAC;MACjDf,KAAK,CAACI,GAAG,CAACS,IAAI,CAAC;;MAEf;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACAD,YAAY,CAACoB,MAAM,CAAC,CAAC;IACvB;;IAEA;IACA,MAAMC,UAAU,GAAG,IAAIvC,UAAU,CAAC,CAAC;IACnCuC,UAAU,CAACzB,IAAI,CAAC,+CAA+C,EAAG0B,UAAU,IAAK;MAC7EC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;MAC1BtB,IAAI,GAAGoB,UAAU;MACjBP,kBAAkB,CAAC,CAAC;IACxB,CAAC,CAAC;;IAGF;IACAQ,OAAO,CAACE,IAAI,CAAC,QAAQ,CAAC;IACtB,MAAMC,aAAa,GAAG,IAAI9C,KAAK,CAAC+C,aAAa,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC;IAC/D,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAGA,CAAC,GAAG,GAAG,EAAGA,CAAC,EAAE,EAAC;MAC5B,MAAMC,KAAK,GAAG,IAAIjD,KAAK,CAACuC,IAAI,CAACO,aAAa,EAAEvB,YAAY,CAAC;MAEzD0B,KAAK,CAACC,QAAQ,CAACC,CAAC,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE;MAC1CJ,KAAK,CAACC,QAAQ,CAACI,CAAC,GAAGF,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE;MAC1CJ,KAAK,CAACC,QAAQ,CAACK,CAAC,GAAGH,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE;MAE1CJ,KAAK,CAACO,QAAQ,CAACC,GAAG,CACdL,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAGD,IAAI,CAACM,EAAE,EAC3BN,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAGD,IAAI,CAACM,EAAE,EAC3B,CACJ,CAAC;MACDlD,KAAK,CAACI,GAAG,CAACqC,KAAK,CAAC;IAClB;IACAN,OAAO,CAACgB,OAAO,CAAC,QAAQ,CAAC;;IAEzB;IACA,MAAMC,WAAW,GAAG,EAAE;IACtB,MAAMC,KAAK,GAAG;MACVC,KAAK,EAAEC,MAAM,CAACC,UAAU;MACxBpC,MAAM,EAAEmC,MAAM,CAACE;IACnB,CAAC;IACD,MAAMC,MAAM,GAAG,IAAIlE,KAAK,CAACmE,iBAAiB,CAACP,WAAW,EAAEC,KAAK,CAACC,KAAK,GAAGD,KAAK,CAACjC,MAAM,CAAC;IACnFsC,MAAM,CAAChB,QAAQ,CAACO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC5BjD,KAAK,CAACI,GAAG,CAACsD,MAAM,CAAC;;IAEjB;IACA,MAAME,QAAQ,GAAG,IAAIpE,KAAK,CAACqE,aAAa,CAAC;MACrCC,MAAM,EAAEC,QAAQ,CAACC,aAAa,CAAC,QAAQ;IAC3C,CAAC,CAAC;IACFJ,QAAQ,CAACK,OAAO,CAACZ,KAAK,CAACC,KAAK,EAAED,KAAK,CAACjC,MAAM,CAAC;;IAE3C;IACA,MAAM8C,OAAO,GAAG,IAAIzE,aAAa,CAACiE,MAAM,EAAEE,QAAQ,CAACO,UAAU,CAAC;IAC9DD,OAAO,CAACE,aAAa,GAAG,IAAI;;IAE5B;IACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;MACvBhB,KAAK,CAACC,KAAK,GAAGC,MAAM,CAACC,UAAU;MAC/BH,KAAK,CAACjC,MAAM,GAAGmC,MAAM,CAACE,WAAW;MAEjCC,MAAM,CAACY,MAAM,GAAGjB,KAAK,CAACC,KAAK,GAAGD,KAAK,CAACjC,MAAM;MAC1CsC,MAAM,CAACa,sBAAsB,CAAC,CAAC;MAE/BX,QAAQ,CAACK,OAAO,CAACZ,KAAK,CAACC,KAAK,EAAED,KAAK,CAACjC,MAAM,CAAC;MAC3CwC,QAAQ,CAACY,aAAa,CAAC5B,IAAI,CAAC6B,GAAG,CAAC,CAAC,EAAElB,MAAM,CAACmB,gBAAgB,CAAC,CAAC;IAChE,CAAC;IACDnB,MAAM,CAACoB,gBAAgB,CAAC,QAAQ,EAAEN,YAAY,CAAC;;IAE/C;IACA,MAAMO,gBAAgB,GAAGA,CAAA,KAAM;MAC3B,IAAI,CAACb,QAAQ,CAACc,iBAAiB,EAAE;QAC7BjB,QAAQ,CAACO,UAAU,CAACW,iBAAiB,CAAC,CAAC;MAC3C,CAAC,MAAM;QACHf,QAAQ,CAACgB,cAAc,CAAC,CAAC;MAC7B;IACJ,CAAC;IACDxB,MAAM,CAACoB,gBAAgB,CAAC,UAAU,EAAEC,gBAAgB,CAAC;;IAGrD;IACA,MAAMI,OAAO,GAAGA,CAAA,KAAM;MAClBd,OAAO,CAACe,MAAM,CAAC,CAAC;MAChBrB,QAAQ,CAACsB,MAAM,CAAClF,KAAK,EAAE0D,MAAM,CAAC;MAC9ByB,qBAAqB,CAACH,OAAO,CAAC;IAClC,CAAC;IACDA,OAAO,CAAC,CAAC;IAET,OAAO,MAAM;MACT;MACAzB,MAAM,CAAC6B,mBAAmB,CAAC,QAAQ,EAAEf,YAAY,CAAC;MAClDd,MAAM,CAAC6B,mBAAmB,CAAC,UAAU,EAAER,gBAAgB,CAAC;IAC5D,CAAC;EACL,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACI/E,OAAA;IAAQwF,SAAS,EAAC;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAEpC,CAAC;AAAC1F,EAAA,CAhKID,aAAa;AAAA4F,EAAA,GAAb5F,aAAa;AAkKnB,eAAeA,aAAa;AAAC,IAAA4F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}