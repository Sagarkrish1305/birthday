{"ast":null,"code":"var _jsxFileName = \"/Users/krishsagar/Desktop/Priya Birthday/PriyaBirthdayFinal/pbirthday/src/Components/ThreeJs/ThreeScene.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\nimport * as dat from 'dat.gui';\nimport gsap from 'gsap';\n\n// Import CSS if needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeScene = () => {\n  _s();\n  useEffect(() => {\n    // Your Three.js logic here\n    const scene = new THREE.Scene();\n    const axesHelper = new THREE.AxesHelper(1e10);\n    scene.add(axesHelper);\n\n    // Texture\n    const textureLoader = new THREE.TextureLoader();\n    const texture = textureLoader.load('/assets/matcaps/matcaps/3.png');\n    texture.magFilter = THREE.NearestFilter;\n    texture.minFilter = THREE.NearestFilter;\n\n    // Variables\n    let textGeometry, text;\n    let font;\n    const textMaterial = new THREE.MeshMatcapMaterial({\n      matcap: texture\n    });\n\n    // Parameters\n    const text3Dparameters = {\n      text: 'Hello Krish',\n      size: 0.5,\n      height: 0.2,\n      curveSegments: 12,\n      bevelEnabled: true,\n      bevelThickness: 0.03,\n      bevelSize: 0.02,\n      bevelOffset: 0,\n      bevelSegments: 5\n    };\n\n    // Function to create and update text geometry\n    function createTextGeometry() {\n      // Your createTextGeometry function\n    }\n\n    // Fonts\n    const fontLoader = new FontLoader();\n    fontLoader.load('assets/fonts/helvetiker_regular.typeface.json', loadedFont => {\n      console.log(\"Font Loaded\");\n      font = loadedFont;\n      createTextGeometry();\n    });\n\n    // GUI controls\n    const gui = new dat.GUI();\n    const textGui = gui.addFolder(\"Text Properties\");\n    // Your GUI controls\n\n    // Donuts\n    console.time(\"donuts\");\n    const donutGeometry = new THREE.TorusGeometry(0.3, 0.2, 20, 45);\n    for (let i = 0; i < 300; i++) {\n      // Your donuts creation loop\n    }\n    console.timeEnd(\"donuts\");\n\n    // Camera\n    const FieldOfView = 75;\n    const sizes = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    };\n    const camera = new THREE.PerspectiveCamera(FieldOfView, sizes.width / sizes.height);\n    camera.position.set(1, 2, 4);\n    scene.add(camera);\n\n    // Renderer\n    const renderer = new THREE.WebGLRenderer({\n      canvas: document.querySelector('.webgl')\n    });\n    renderer.setSize(sizes.width, sizes.height);\n\n    // Orbit Control\n    const control = new OrbitControls(camera, renderer.domElement);\n    control.enableDamping = true;\n\n    // Handle window resize\n    const handleResize = () => {\n      sizes.width = window.innerWidth;\n      sizes.height = window.innerHeight;\n      camera.aspect = sizes.width / sizes.height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(sizes.width, sizes.height);\n      renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Handle full screen\n    const handleFullscreen = () => {\n      if (!document.fullscreenElement) {\n        renderer.domElement.requestFullscreen();\n      } else {\n        document.exitFullscreen();\n      }\n    };\n    window.addEventListener('dblclick', handleFullscreen);\n\n    // Handle keypress\n    const clock = new THREE.Clock();\n    window.addEventListener('keypress', event => {\n      const elapsedTime = clock.getElapsedTime();\n      if (event.key === 'w') {\n        camera.position.z -= 0.5 * elapsedTime;\n      } else if (event.key === 's') {\n        camera.position.z += 0.5 * elapsedTime;\n      }\n      renderer.render(scene, camera);\n    });\n\n    // Animation loop\n    const animate = () => {\n      control.update();\n      renderer.render(scene, camera);\n      requestAnimationFrame(animate);\n    };\n    animate();\n    return () => {\n      // Cleanup logic if needed\n      window.removeEventListener('resize', handleResize);\n      window.removeEventListener('dblclick', handleFullscreen);\n    };\n  }, []); // Empty dependency array to run only once on component mount\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    className: \"webgl\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 9\n  }, this);\n};\n_s(ThreeScene, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ThreeScene;\nexport default ThreeScene;\nvar _c;\n$RefreshReg$(_c, \"ThreeScene\");","map":{"version":3,"names":["React","useEffect","THREE","OrbitControls","FontLoader","TextGeometry","dat","gsap","jsxDEV","_jsxDEV","ThreeScene","_s","scene","Scene","axesHelper","AxesHelper","add","textureLoader","TextureLoader","texture","load","magFilter","NearestFilter","minFilter","textGeometry","text","font","textMaterial","MeshMatcapMaterial","matcap","text3Dparameters","size","height","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","createTextGeometry","fontLoader","loadedFont","console","log","gui","GUI","textGui","addFolder","time","donutGeometry","TorusGeometry","i","timeEnd","FieldOfView","sizes","width","window","innerWidth","innerHeight","camera","PerspectiveCamera","position","set","renderer","WebGLRenderer","canvas","document","querySelector","setSize","control","domElement","enableDamping","handleResize","aspect","updateProjectionMatrix","setPixelRatio","Math","min","devicePixelRatio","addEventListener","handleFullscreen","fullscreenElement","requestFullscreen","exitFullscreen","clock","Clock","event","elapsedTime","getElapsedTime","key","z","render","animate","update","requestAnimationFrame","removeEventListener","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/krishsagar/Desktop/Priya Birthday/PriyaBirthdayFinal/pbirthday/src/Components/ThreeJs/ThreeScene.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\nimport * as dat from 'dat.gui';\nimport gsap from 'gsap';\n\n// Import CSS if needed\n\nconst ThreeScene = () => {\n    useEffect(() => {\n        // Your Three.js logic here\n        const scene = new THREE.Scene();\n\n        const axesHelper = new THREE.AxesHelper(1e10);\n        scene.add(axesHelper);\n\n        // Texture\n        const textureLoader = new THREE.TextureLoader();\n        const texture = textureLoader.load('/assets/matcaps/matcaps/3.png');\n        texture.magFilter = THREE.NearestFilter;\n        texture.minFilter = THREE.NearestFilter;\n\n        // Variables\n        let textGeometry, text;\n        let font;\n        const textMaterial = new THREE.MeshMatcapMaterial({\n            matcap: texture\n        });\n\n        // Parameters\n        const text3Dparameters = {\n            text: 'Hello Krish',\n            size: 0.5,\n            height: 0.2,\n            curveSegments: 12,\n            bevelEnabled: true,\n            bevelThickness: 0.03,\n            bevelSize: 0.02,\n            bevelOffset: 0,\n            bevelSegments: 5\n        };\n\n        // Function to create and update text geometry\n        function createTextGeometry() {\n            // Your createTextGeometry function\n        }\n\n        // Fonts\n        const fontLoader = new FontLoader();\n        fontLoader.load('assets/fonts/helvetiker_regular.typeface.json', (loadedFont) => {\n            console.log(\"Font Loaded\");\n            font = loadedFont;\n            createTextGeometry();\n        });\n\n        // GUI controls\n        const gui = new dat.GUI();\n        const textGui = gui.addFolder(\"Text Properties\");\n        // Your GUI controls\n\n        // Donuts\n        console.time(\"donuts\");\n        const donutGeometry = new THREE.TorusGeometry(0.3, 0.2, 20, 45);\n        for(let i = 0 ; i < 300 ; i++){\n            // Your donuts creation loop\n        }\n        console.timeEnd(\"donuts\");\n\n        // Camera\n        const FieldOfView = 75;\n        const sizes = {\n            width: window.innerWidth,\n            height: window.innerHeight,\n        };\n        const camera = new THREE.PerspectiveCamera(FieldOfView, sizes.width / sizes.height);\n        camera.position.set(1, 2, 4);\n        scene.add(camera);\n\n        // Renderer\n        const renderer = new THREE.WebGLRenderer({\n            canvas: document.querySelector('.webgl')\n        });\n        renderer.setSize(sizes.width, sizes.height);\n\n        // Orbit Control\n        const control = new OrbitControls(camera, renderer.domElement);\n        control.enableDamping = true;\n\n        // Handle window resize\n        const handleResize = () => {\n            sizes.width = window.innerWidth;\n            sizes.height = window.innerHeight;\n\n            camera.aspect = sizes.width / sizes.height;\n            camera.updateProjectionMatrix();\n            \n            renderer.setSize(sizes.width, sizes.height);\n            renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        };\n        window.addEventListener('resize', handleResize);\n\n        // Handle full screen\n        const handleFullscreen = () => {\n            if (!document.fullscreenElement) {\n                renderer.domElement.requestFullscreen();\n            } else {\n                document.exitFullscreen();\n            }\n        };\n        window.addEventListener('dblclick', handleFullscreen);\n\n        // Handle keypress\n        const clock = new THREE.Clock();\n        window.addEventListener('keypress', (event) => {\n            const elapsedTime = clock.getElapsedTime();\n        \n            if (event.key === 'w') {\n                camera.position.z -= 0.5 * elapsedTime;\n            } else if (event.key === 's') {\n                camera.position.z += 0.5 * elapsedTime;\n            }\n            renderer.render(scene, camera);\n        });\n\n        // Animation loop\n        const animate = () => {\n            control.update();\n            renderer.render(scene, camera);\n            requestAnimationFrame(animate);\n        };\n        animate();\n\n        return () => {\n            // Cleanup logic if needed\n            window.removeEventListener('resize', handleResize);\n            window.removeEventListener('dblclick', handleFullscreen);\n        };\n    }, []); // Empty dependency array to run only once on component mount\n\n    return (\n        <canvas className=\"webgl\" />\n    );\n};\n\nexport default ThreeScene;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}