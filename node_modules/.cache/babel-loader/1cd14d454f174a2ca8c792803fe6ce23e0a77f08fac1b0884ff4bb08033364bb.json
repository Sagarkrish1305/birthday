{"ast":null,"code":"var _jsxFileName = \"/Users/krishsagar/Desktop/Priya Birthday/PriyaBirthdayFinal/pbirthday/src/Components/ThreeJs/ThreeScene.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport * as THREE from 'three';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeScene = () => {\n  _s();\n  useEffect(() => {\n    // Your Three.js logic here\n    const scene = new THREE.Scene();\n\n    //\n    const textureLoader = new THREE.TextureLoader();\n    const texture = textureLoader.load('/Assets/matcaps/3.png');\n    texture.magFilter = THREE.NearestFilter;\n    texture.minFilter = THREE.NearestFilter;\n\n    // Variables\n    let textGeometry, text, text1;\n    let font;\n    const textMaterial = new THREE.MeshMatcapMaterial({\n      matcap: texture\n    });\n\n    // Parameters\n    const text3Dparameters = {\n      text: 'Hello Krish',\n      size: 0.5,\n      height: 0.2,\n      curveSegments: 12,\n      bevelEnabled: true,\n      bevelThickness: 0.03,\n      bevelSize: 0.02,\n      bevelOffset: 0,\n      bevelSegments: 5\n    };\n\n    // Function to create and update text geometry\n    function createTextGeometry() {\n      if (text) {\n        scene.remove(text);\n        textGeometry.dispose();\n      }\n      textGeometry = new TextGeometry(text3Dparameters.text, {\n        font: font,\n        size: text3Dparameters.size,\n        depth: text3Dparameters.height,\n        curveSegments: text3Dparameters.curveSegments,\n        bevelEnabled: text3Dparameters.bevelEnabled,\n        bevelThickness: text3Dparameters.bevelThickness,\n        bevelSize: text3Dparameters.bevelSize,\n        bevelOffset: text3Dparameters.bevelOffset,\n        bevelSegments: text3Dparameters.bevelSegments\n      });\n      text = new THREE.Mesh(textGeometry, textMaterial);\n      scene.add(text);\n\n      // To Center the Text Geometry\n      // textGeometry.computeBoundingBox()\n      // console.log(textGeometry.boundingBox)\n      // textGeometry.translate(\n      //     - (textGeometry.boundingBox.max.x - text3Dparameters.bevelSize) * 0.5, \n      //     - (textGeometry.boundingBox.max.y - text3Dparameters.bevelSize) * 0.5, \n      //     - (textGeometry.boundingBox.max.z - text3Dparameters.bevelThickness) * 0.5, \n      // )\n\n      // An easy way is to \n      textGeometry.center();\n    }\n\n    // Fonts\n    const fontLoader = new FontLoader();\n    fontLoader.load('/Assets/Fonts/helvetiker_regular.typeface.json', loadedFont => {\n      console.log(\"Font Loaded\");\n      font = loadedFont;\n      createTextGeometry();\n    });\n\n    // Donuts\n    console.time(\"donuts\");\n    const donutGeometry = new THREE.TorusGeometry(0.3, 0.2, 20, 45);\n    for (let i = 0; i < 50; i++) {\n      const donut = new THREE.Mesh(donutGeometry, textMaterial);\n      donut.position.x = Math.random() * 20 - 10;\n      donut.position.y = Math.random() * 20 - 10;\n      donut.position.z = Math.random() * 20 - 10;\n      donut.rotation.set(Math.random() * 2 * Math.PI, Math.random() * 2 * Math.PI, 0);\n      scene.add(donut);\n    }\n    console.timeEnd(\"donuts\");\n\n    // Camera\n    const FieldOfView = 75;\n    const sizes = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    };\n    const X = 4,\n      Y = 3,\n      Z = 5;\n    const camera = new THREE.PerspectiveCamera(FieldOfView, sizes.width / sizes.height);\n    camera.position.set(X, Y, Z);\n    scene.add(camera);\n\n    // Renderer\n    const renderer = new THREE.WebGLRenderer({\n      canvas: document.querySelector('.webgl')\n    });\n    renderer.setSize(sizes.width, sizes.height);\n\n    // Handle window resize\n    const handleResize = () => {\n      sizes.width = window.innerWidth;\n      sizes.height = window.innerHeight;\n      camera.aspect = sizes.width / sizes.height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(sizes.width, sizes.height);\n      renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n    };\n    window.addEventListener('resize', handleResize);\n    let angle = 0;\n    // Animation loop\n    const animate = () => {\n      renderer.render(scene, camera);\n      if (text) {\n        camera.lookAt(text.position);\n        camera.position.set(X * Math.cos(angle), Y * Math.sin(angle), Z * Math.sin(angle));\n        angle += 0.01;\n      }\n      requestAnimationFrame(animate);\n    };\n    animate();\n    return () => {\n      // Cleanup logic if needed\n    };\n  }, []); // Empty dependency array to run only once on component mount\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    className: \"webgl\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 9\n  }, this);\n};\n_s(ThreeScene, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = ThreeScene;\nexport default ThreeScene;\nvar _c;\n$RefreshReg$(_c, \"ThreeScene\");","map":{"version":3,"names":["React","useEffect","THREE","FontLoader","TextGeometry","jsxDEV","_jsxDEV","ThreeScene","_s","scene","Scene","textureLoader","TextureLoader","texture","load","magFilter","NearestFilter","minFilter","textGeometry","text","text1","font","textMaterial","MeshMatcapMaterial","matcap","text3Dparameters","size","height","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","createTextGeometry","remove","dispose","depth","Mesh","add","center","fontLoader","loadedFont","console","log","time","donutGeometry","TorusGeometry","i","donut","position","x","Math","random","y","z","rotation","set","PI","timeEnd","FieldOfView","sizes","width","window","innerWidth","innerHeight","X","Y","Z","camera","PerspectiveCamera","renderer","WebGLRenderer","canvas","document","querySelector","setSize","handleResize","aspect","updateProjectionMatrix","setPixelRatio","min","devicePixelRatio","addEventListener","angle","animate","render","lookAt","cos","sin","requestAnimationFrame","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/krishsagar/Desktop/Priya Birthday/PriyaBirthdayFinal/pbirthday/src/Components/ThreeJs/ThreeScene.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport * as THREE from 'three';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\n\nconst ThreeScene = () => {\n    useEffect(() => {\n        // Your Three.js logic here\n        const scene = new THREE.Scene();\n\n        //\n        const textureLoader = new THREE.TextureLoader();\n        const texture = textureLoader.load('/Assets/matcaps/3.png');\n        texture.magFilter = THREE.NearestFilter;\n        texture.minFilter = THREE.NearestFilter;\n\n        // Variables\n        let textGeometry, text, text1;\n        let font;\n        const textMaterial = new THREE.MeshMatcapMaterial({\n            matcap: texture\n        });\n\n        // Parameters\n        const text3Dparameters = {\n            text: 'Hello Krish',\n            size: 0.5,\n            height: 0.2,\n            curveSegments: 12,\n            bevelEnabled: true,\n            bevelThickness: 0.03,\n            bevelSize: 0.02,\n            bevelOffset: 0,\n            bevelSegments: 5\n        };\n\n        // Function to create and update text geometry\n        function createTextGeometry() {\n          if (text) {\n              scene.remove(text);\n              textGeometry.dispose();\n          }\n\n      \n          textGeometry = new TextGeometry(text3Dparameters.text, {\n              font: font,\n              size: text3Dparameters.size,\n              depth: text3Dparameters.height,\n              curveSegments: text3Dparameters.curveSegments,\n              bevelEnabled: text3Dparameters.bevelEnabled,\n              bevelThickness: text3Dparameters.bevelThickness,\n              bevelSize: text3Dparameters.bevelSize,\n              bevelOffset: text3Dparameters.bevelOffset,\n              bevelSegments: text3Dparameters.bevelSegments\n          });\n      \n          \n          text = new THREE.Mesh(textGeometry, textMaterial);\n          scene.add(text);\n      \n          // To Center the Text Geometry\n          // textGeometry.computeBoundingBox()\n          // console.log(textGeometry.boundingBox)\n          // textGeometry.translate(\n          //     - (textGeometry.boundingBox.max.x - text3Dparameters.bevelSize) * 0.5, \n          //     - (textGeometry.boundingBox.max.y - text3Dparameters.bevelSize) * 0.5, \n          //     - (textGeometry.boundingBox.max.z - text3Dparameters.bevelThickness) * 0.5, \n          // )\n      \n          // An easy way is to \n          textGeometry.center()\n        }\n\n        // Fonts\n        const fontLoader = new FontLoader();\n        fontLoader.load('/Assets/Fonts/helvetiker_regular.typeface.json', (loadedFont) => {\n            console.log(\"Font Loaded\");\n            font = loadedFont;\n            createTextGeometry();\n        });\n\n\n        // Donuts\n        console.time(\"donuts\");\n        const donutGeometry = new THREE.TorusGeometry(0.3, 0.2, 20, 45);\n        for(let i = 0 ; i < 50 ; i++){\n          const donut = new THREE.Mesh(donutGeometry, textMaterial)\n    \n          donut.position.x = Math.random() * 20 - 10\n          donut.position.y = Math.random() * 20 - 10\n          donut.position.z = Math.random() * 20 - 10\n\n          donut.rotation.set(\n              Math.random() * 2 * Math.PI, \n              Math.random() * 2 * Math.PI,\n              0\n          )\n          scene.add(donut)\n        }\n        console.timeEnd(\"donuts\");\n\n        // Camera\n        const FieldOfView = 75;\n        const sizes = {\n            width: window.innerWidth,\n            height: window.innerHeight,\n        };\n        const X = 4, Y = 3, Z = 5;\n        const camera = new THREE.PerspectiveCamera(FieldOfView, sizes.width / sizes.height);\n        camera.position.set(X, Y, Z);\n        scene.add(camera);\n\n        // Renderer\n        const renderer = new THREE.WebGLRenderer({\n            canvas: document.querySelector('.webgl')\n        });\n        renderer.setSize(sizes.width, sizes.height);\n\n\n        // Handle window resize\n        const handleResize = () => {\n            sizes.width = window.innerWidth;\n            sizes.height = window.innerHeight;\n\n            camera.aspect = sizes.width / sizes.height;\n            camera.updateProjectionMatrix();\n            \n            renderer.setSize(sizes.width, sizes.height);\n            renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));\n        };\n        window.addEventListener('resize', handleResize);\n\n        let angle = 0;\n        // Animation loop\n        const animate = () => {\n            renderer.render(scene, camera);\n            if(text){\n              camera.lookAt(text.position)\n              camera.position.set(\n                X * Math.cos(angle),\n                Y * Math.sin(angle),\n                Z * Math.sin(angle)\n              )\n              angle += 0.01\n            }\n            requestAnimationFrame(animate);\n        };\n        animate();\n\n        return () => {\n            // Cleanup logic if needed\n        };\n    }, []); // Empty dependency array to run only once on component mount\n\n    return (\n        <canvas className=\"webgl\" />\n    );\n};\n\nexport default ThreeScene;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}