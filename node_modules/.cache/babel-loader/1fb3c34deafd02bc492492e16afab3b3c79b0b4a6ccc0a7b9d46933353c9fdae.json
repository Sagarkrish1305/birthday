{"ast":null,"code":"var _jsxFileName = \"/Users/krishsagar/Desktop/Priya Birthday/PriyaBirthdayFinal/pbirthday/src/Components/ThreeJs/ThreeScene.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeScene = () => {\n  _s();\n  const canvasRef = useRef(null); // Reference to the canvas element\n\n  useEffect(() => {\n    // Three.js scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      canvas: canvasRef.current\n    });\n\n    // Orbit controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n\n    // Add axes helper\n    const axesHelper = new THREE.AxesHelper(100);\n    scene.add(axesHelper);\n\n    // Font loader\n    const fontLoader = new FontLoader();\n    let font;\n    fontLoader.load('assets/fonts/helvetiker_regular.typeface.json', loadedFont => {\n      font = loadedFont;\n      createTextGeometry();\n    });\n\n    // Text parameters\n    const text3Dparameters = {\n      text: 'Hello Krish',\n      size: 0.5,\n      height: 0.2,\n      curveSegments: 12,\n      bevelEnabled: true,\n      bevelThickness: 0.03,\n      bevelSize: 0.02,\n      bevelOffset: 0,\n      bevelSegments: 5\n    };\n\n    // Create text geometry\n    let textGeometry, textMesh;\n    const createTextGeometry = () => {\n      if (textMesh) {\n        scene.remove(textMesh);\n        textGeometry.dispose();\n      }\n      textGeometry = new TextGeometry(text3Dparameters.text, {\n        font: font,\n        size: text3Dparameters.size,\n        depth: text3Dparameters.height,\n        curveSegments: text3Dparameters.curveSegments,\n        bevelEnabled: text3Dparameters.bevelEnabled,\n        bevelThickness: text3Dparameters.bevelThickness,\n        bevelSize: text3Dparameters.bevelSize,\n        bevelOffset: text3Dparameters.bevelOffset,\n        bevelSegments: text3Dparameters.bevelSegments\n      });\n      textMesh = new THREE.Mesh(textGeometry, new THREE.MeshBasicMaterial({\n        color: 0xffffff\n      }));\n      scene.add(textMesh);\n    };\n\n    // Resize handling\n    const handleResize = () => {\n      const {\n        innerWidth,\n        innerHeight\n      } = window;\n      camera.aspect = innerWidth / innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(innerWidth, innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Render loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []); // Empty dependency array for initialization only\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 10\n  }, this);\n};\n_s(ThreeScene, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = ThreeScene;\nexport default ThreeScene;\nvar _c;\n$RefreshReg$(_c, \"ThreeScene\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","OrbitControls","FontLoader","TextGeometry","jsxDEV","_jsxDEV","ThreeScene","_s","canvasRef","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","canvas","current","controls","domElement","enableDamping","axesHelper","AxesHelper","add","fontLoader","font","load","loadedFont","createTextGeometry","text3Dparameters","text","size","height","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","textGeometry","textMesh","remove","dispose","depth","Mesh","MeshBasicMaterial","color","handleResize","aspect","updateProjectionMatrix","setSize","addEventListener","animate","requestAnimationFrame","update","render","removeEventListener","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/krishsagar/Desktop/Priya Birthday/PriyaBirthdayFinal/pbirthday/src/Components/ThreeJs/ThreeScene.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\n\nconst ThreeScene = () => {\n  const canvasRef = useRef(null); // Reference to the canvas element\n\n  useEffect(() => {\n    // Three.js scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ canvas: canvasRef.current });\n\n    // Orbit controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n\n    // Add axes helper\n    const axesHelper = new THREE.AxesHelper(100);\n    scene.add(axesHelper);\n\n    // Font loader\n    const fontLoader = new FontLoader();\n    let font;\n\n    fontLoader.load('assets/fonts/helvetiker_regular.typeface.json', (loadedFont) => {\n      font = loadedFont;\n      createTextGeometry();\n    });\n\n    // Text parameters\n    const text3Dparameters = {\n      text: 'Hello Krish',\n      size: 0.5,\n      height: 0.2,\n      curveSegments: 12,\n      bevelEnabled: true,\n      bevelThickness: 0.03,\n      bevelSize: 0.02,\n      bevelOffset: 0,\n      bevelSegments: 5\n    };\n\n    // Create text geometry\n    let textGeometry, textMesh;\n\n    const createTextGeometry = () => {\n      if (textMesh) {\n        scene.remove(textMesh);\n        textGeometry.dispose();\n      }\n\n      textGeometry = new TextGeometry(text3Dparameters.text, {\n        font: font,\n        size: text3Dparameters.size,\n        depth: text3Dparameters.height,\n        curveSegments: text3Dparameters.curveSegments,\n        bevelEnabled: text3Dparameters.bevelEnabled,\n        bevelThickness: text3Dparameters.bevelThickness,\n        bevelSize: text3Dparameters.bevelSize,\n        bevelOffset: text3Dparameters.bevelOffset,\n        bevelSegments: text3Dparameters.bevelSegments\n      });\n\n      textMesh = new THREE.Mesh(textGeometry, new THREE.MeshBasicMaterial({ color: 0xffffff }));\n      scene.add(textMesh);\n    };\n\n\n    // Resize handling\n    const handleResize = () => {\n      const { innerWidth, innerHeight } = window;\n      camera.aspect = innerWidth / innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(innerWidth, innerHeight);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Render loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n\n    animate();\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []); // Empty dependency array for initialization only\n\n  return <canvas ref={canvasRef} />;\n};\n\nexport default ThreeScene;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}