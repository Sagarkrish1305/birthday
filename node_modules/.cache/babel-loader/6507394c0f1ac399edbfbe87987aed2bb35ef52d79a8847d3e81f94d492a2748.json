{"ast":null,"code":"var _jsxFileName = \"/Users/krishsagar/Desktop/Priya Birthday/PriyaBirthdayFinal/pbirthday/src/Components/ThreeJs/ThreeScene.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeScene = () => {\n  _s();\n  const canvasRef = useRef(null); // Reference to the canvas element\n\n  useEffect(() => {\n    let scene, camera, renderer, controls;\n    let textGeometry, textMesh;\n    let font;\n\n    // Initialize Three.js scene\n    const initScene = () => {\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      renderer = new THREE.WebGLRenderer({\n        canvas: canvasRef.current\n      });\n      controls = new OrbitControls(camera, renderer.domElement);\n      controls.enableDamping = true;\n      const axesHelper = new THREE.AxesHelper(100);\n      scene.add(axesHelper);\n      handleResize(); // Handle initial canvas size\n      window.addEventListener('resize', handleResize);\n    };\n\n    // Load font and create text geometry\n    const loadFontAndCreateText = () => {\n      const fontLoader = new FontLoader();\n      fontLoader.load('/Assets/Fonts/helvetiker_regular.typeface.json', loadedFont => {\n        font = loadedFont;\n        createTextGeometry();\n      });\n    };\n\n    // Create text geometry\n    const createTextGeometry = () => {\n      if (textMesh) {\n        scene.remove(textMesh);\n        textGeometry.dispose();\n      }\n      textGeometry = new TextGeometry('Hello Krish', {\n        font: font,\n        size: 0.5,\n        depth: 0.2,\n        curveSegments: 12,\n        bevelEnabled: true,\n        bevelThickness: 0.03,\n        bevelSize: 0.02,\n        bevelOffset: 0,\n        bevelSegments: 5\n      });\n      textMesh = new THREE.Mesh(textGeometry, new THREE.MeshBasicMaterial({\n        color: 0xffffff\n      }));\n      scene.add(textMesh);\n    };\n\n    // Handle window resize\n    const handleResize = () => {\n      const {\n        innerWidth,\n        innerHeight\n      } = window;\n      camera.aspect = innerWidth / innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(innerWidth, innerHeight);\n    };\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n\n    // Initialize scene and start animation loop\n    initScene();\n    loadFontAndCreateText();\n    animate();\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []); // Empty dependency array for initialization only\n\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 10\n  }, this);\n};\n_s(ThreeScene, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = ThreeScene;\nexport default ThreeScene;\nvar _c;\n$RefreshReg$(_c, \"ThreeScene\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","OrbitControls","FontLoader","TextGeometry","jsxDEV","_jsxDEV","ThreeScene","_s","canvasRef","scene","camera","renderer","controls","textGeometry","textMesh","font","initScene","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","canvas","current","domElement","enableDamping","axesHelper","AxesHelper","add","handleResize","addEventListener","loadFontAndCreateText","fontLoader","load","loadedFont","createTextGeometry","remove","dispose","size","depth","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","Mesh","MeshBasicMaterial","color","aspect","updateProjectionMatrix","setSize","animate","requestAnimationFrame","update","render","removeEventListener","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/krishsagar/Desktop/Priya Birthday/PriyaBirthdayFinal/pbirthday/src/Components/ThreeJs/ThreeScene.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\n\nconst ThreeScene = () => {\n  const canvasRef = useRef(null); // Reference to the canvas element\n\n  useEffect(() => {\n    let scene, camera, renderer, controls;\n    let textGeometry, textMesh;\n    let font;\n\n    // Initialize Three.js scene\n    const initScene = () => {\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n      renderer = new THREE.WebGLRenderer({ canvas: canvasRef.current });\n\n      controls = new OrbitControls(camera, renderer.domElement);\n      controls.enableDamping = true;\n\n      const axesHelper = new THREE.AxesHelper(100);\n      scene.add(axesHelper);\n\n      handleResize(); // Handle initial canvas size\n      window.addEventListener('resize', handleResize);\n    };\n\n    // Load font and create text geometry\n    const loadFontAndCreateText = () => {\n      const fontLoader = new FontLoader();\n      fontLoader.load('/Assets/Fonts/helvetiker_regular.typeface.json', loadedFont => {\n        font = loadedFont;\n        createTextGeometry();\n      });\n    };\n\n    // Create text geometry\n    const createTextGeometry = () => {\n      if (textMesh) {\n        scene.remove(textMesh);\n        textGeometry.dispose();\n      }\n\n      textGeometry = new TextGeometry('Hello Krish', {\n        font: font,\n        size: 0.5,\n        depth: 0.2,\n        curveSegments: 12,\n        bevelEnabled: true,\n        bevelThickness: 0.03,\n        bevelSize: 0.02,\n        bevelOffset: 0,\n        bevelSegments: 5\n      });\n\n      textMesh = new THREE.Mesh(textGeometry, new THREE.MeshBasicMaterial({ color: 0xffffff }));\n      scene.add(textMesh);\n    };\n\n    // Handle window resize\n    const handleResize = () => {\n      const { innerWidth, innerHeight } = window;\n      camera.aspect = innerWidth / innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(innerWidth, innerHeight);\n    };\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n\n    // Initialize scene and start animation loop\n    initScene();\n    loadFontAndCreateText();\n    animate();\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []); // Empty dependency array for initialization only\n\n  return <canvas ref={canvasRef} />;\n};\n\nexport default ThreeScene;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}